package parser

import (
	"time"

	log "github.com/Sirupsen/logrus"

	"encoding/json"
	"fmt"

	"github.com/lepinkainen/instafetch/worker"
)

var (
	instagramStreamURL = "https://www.instagram.com/%s/?__a=1" // completed with username
)

// API Structs autogenerated with https://github.com/mohae/json2go/tree/master/cmd/json2go

// InstagramAPI is a reply to the main page query
type InstagramAPI struct {
	LoggingPageID string `json:"logging_page_id"`
	User          `json:"user"`
}

func getNextPageInfo(response InstagramAPI) (string, string) {
	if !response.User.Media.PageInfo.HasNextPage {
		return "", ""
	}

	var id = response.User.ID
	var endCursor = response.User.Media.PageInfo.EndCursor

	return id, endCursor
}

// the first page is a bit different from the other pages
func getFirstPage(userName string) (InstagramAPI, error) {
	myLogger := log.WithField("module", "stream")
	var url = fmt.Sprintf(instagramStreamURL, userName)

	// interface to hold the instagram JSON
	var response InstagramAPI

	data, err := worker.GetPage(url)
	if err != nil {
		myLogger.Errorln("Error fetching page", err.Error())
		return response, err
	}

	myLogger.Debugf("Page for %s fetched", userName)

	// unmarshal the JSON to the interface
	err = json.Unmarshal(data, &response)
	if err != nil {
		myLogger.Errorf("Error unmashaling JSON for user %s: %v", userName, err.Error())
		//fmt.Println(string(data))
		return response, err
	}

	myLogger.Debugf("Data for %s unmarshaled", userName)

	return response, nil
}

func parseFirstPage(baseItem DownloadItem, res InstagramAPI, items chan<- DownloadItem) {
	myLogger := log.WithField("module", "stream")

	// get media urls according to type
	for _, media := range res.User.Media.Nodess {
		item := DownloadItem(baseItem)
		item.Shortcode = media.Code

		switch shortcode := media.Typename; shortcode {
		case "GraphVideo":
			go func(item DownloadItem, items chan<- DownloadItem) {
				getVideoURL(item, items)
			}(item, items)
		case "GraphSidecar":
			go func(item DownloadItem, items chan<- DownloadItem) {
				getSidecarURLs(item, items)
			}(item, items)
		case "GraphImage":
			item.Created = time.Unix(int64(media.Date), 0)
			item.URL = media.DisplaySrc
			items <- item
			//getImageURL(media.Code, items)
		default:
			myLogger.Errorf("Unknown media type: '%v'", media.Typename)

		}
	}
}

// MediaURLs returns direct links to all media on an users stream
func MediaURLs(userName string, latestOnly bool, items chan<- DownloadItem) {
	myLogger := log.WithField("module", "stream")

	res, err := getFirstPage(userName)
	if err != nil {
		myLogger.Errorf("Error when parsing first page for %s", userName)
		return
	}

	// Basic info for items to download
	baseItem := DownloadItem{
		UserID: res.Username,
		ID:     res.User.ID,
	}

	parseFirstPage(baseItem, res, items)

	if !latestOnly {
		id, endCursor := getNextPageInfo(res)

		page := 1

		for endCursor != "" {
			myLogger.Infof("Parsed page %d for %s", page, userName)
			endCursor = parseNextPage(baseItem, id, endCursor, items)
			page = page + 1
		}
	}
}
